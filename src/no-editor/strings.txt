//String with Unique characters
public boolean isUnique(String s) {
    char[] charArray = s.toCharArray();
    for (int i = 0; i < charArray.length; i++) {
        for (int j = 0; j < charArray.length; j++) {
            if (i != j && charArray[i] == charArray[j])
                return false;
        }
    }
    return true;
}

//Reverse a String

string reverse(String s){
  StringBuilder StringBuilder = new StringBuilder();
  for(int i=s.length()-1; i>-1 ;i--){
    stringBuilder.append(s.charAt(i));
  }
  return stringBuilder.toString();
}

-- In place string reverse
String inplaceReverse(String s){
  int mid = s.length()/2;
  int startIdx = 0;
  for(int i=s.length()-1; i>=mid; i--){
    char temp = s.charAt(i);
    s = s.replace(s.charAt(i), s.charAt(startIdx));
    s = s.replace(s.charAt(startIdx), temp);
    startIdx++;
  }
}

-- In place string replace
String replaceSpaces(String s, int length){
  char[] charArray = s.toCharArray();
  for(int i=0; i<length; i++){
    if(charArray[i] == ' '){
        charArray[i] = '%20';
    }
  }
  return (String)charArray;
}

-- check if a string is permutation of another
Method A: Sort and compare strings

boolean isCombinationUsingSort(String a, String b){
    char[] aArray = a.toCharArray();
    char[] bArray = b.toCharArray();
    Arrays.sort(aArray);
    Arrays.sort(bArray);
    return String.valueOf(aArray).equals(String.valueOf(bArray));
}

Method B: Check character count

boolean isCombinationUsingCharacterCount(String a, String b){
    char[] aArray = a.toCharArray();
    char[] characterCountTracker = new char[128];
    for(char c : aArray){
        characterCountTracker[(int)(c-97)]++;
    }
    char[] bArray = b.toCharArray();
    for(char c : bArray){
        if(--characterCountTracker[(int)(c-97)] < 0){
            return false;
        }
    }
    return true;
}

